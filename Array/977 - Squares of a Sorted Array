Given an array of integers A sorted in non-decreasing order, return an array of the squares of each number, also in sorted non-decreasing order.

 

Example 1:

Input: [-4,-1,0,3,10]
Output: [0,1,9,16,100]
Example 2:

Input: [-7,-3,2,3,11]
Output: [4,9,9,49,121]
 

Note:

1 <= A.length <= 10000
-10000 <= A[i] <= 10000
A is sorted in non-decreasing order.





time = O(n)
space = O(n)

Best solution:
class Solution {
    public int[] sortedSquares(int[] A) {
        
        if (A == null || A.length == 0)
            throw new IllegalArgumentException();
        
        int i = 0;
        int N = A.length;
        while (i < N && A[i] < 0)
            i++;
        
        int j = i - 1;
        int[] result = new int[N];
        int index = 0;
        
        while (j >= 0 && i < N) {
            if (A[i]*A[i] > A[j]*A[j]) {
                result[index] = A[j]*A[j];
                j--;
            } else {
                result[index] = A[i]*A[i];
                i++;
            }
            index++;
        }
        
        while (j >= 0) {
            result[index] = A[j]*A[j];
            j--;
            index++;
        }
        
        while (i < N) {
            result[index] = A[i]*A[i];
            i++;
            index++;
        }
        
        return result;
    }
}







time = O(nlogn)
space = O(n)

Brute Force:

import java.util.Arrays;

class Solution {
    public int[] sortedSquares(int[] A) {
        
        if (A == null || A.length == 0)
            throw new IllegalArgumentException();
        
        for (int i = 0; i < A.length; i++)
            A[i] *= A[i];
            
        Arrays.sort(A);
        return A;
        
    }
}